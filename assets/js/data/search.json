[ { "title": "VORP Utilities", "url": "/VORP_API-docs/posts/utils/", "categories": "Documentation Lua, CORE, UTILS", "tags": "Lua", "date": "2022-12-03 03:33:00 +0000", "snippet": "VORP Utils A Vorp Utility Script that allows you to easily interact with RedM Natives and VorpCore in a Vorp standardized way. The goal of this is to make it easier to use some of the more complicated, or heavily lined natives.How to useBlipsYou can leverage Vorps built in function for map blips.Create a BlipPlace your code within any thread loop (must be constant looped to see the blips) Parameter Description text What the blip will display on the map bliphash The hashname of the blip (found here) scale How big the blip is x The x coordinate in the game world y The y coordinate in the game world z The z coordinate in the game world Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() while true do Citizen.Wait(0) local blip = VORPutils.Blips:SetBlip('Gift', 'blip_special_series_1', 0.2, x, y, z) endend)Delete a BlipPlace your code within any thread loop (must be constant looped to see the blips)-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() while true do Citizen.Wait(0) local blip = VORPutils.Blips:SetBlip('Gift', 'blip_special_series_1', 0.2, x, y, z) VORPutils.Blips:RemoveBlip(blip) -- OR blip:Remove() endend)PromptsYou can leverage Vorps built in function for easy in-game prompts.Setup a Prompt GroupThis sets up the Prompt Group, which will allow you to attach future prompts to this group so that they can be displayed. This is required.Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Groupend)Register PromptOnce you have the Prompt Group setup, you can now register a prompt to display within the group. Parameter Description title What the Prompt group will display next to the press button button The hash key (found here) enabled If 0 you cannot click, if 1 you can click visible If 0 you cannot see the prompt, if 1 you can see the group pulsing If true prompt will urgently pulse, if false it will not mode What kind of prompt. (Options: click, hold, customhold, mash, timed) options Extra Options for the Mode you select. (See Mode Options below) Modes Options| Mode | Key | Options | example||–|–|–|–|| click | None | None | None || hold | timedeventhash | SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING | { timedeventhash = “SHORT_TIMED_EVENT” } || customhold | holdtime | Miliseconds | { holdtime = 3000 }|| mash | mashamount | &gt; 0 | { mashamount = 20 }|| timed | depletiontime | Miliseconds | { depletiontime = 10000}|PromptGroup:RegisterPrompt(title, button, enabled, visible, pulsing, mode, options)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0) endend)Display Prompt GroupNow that you have a Group setup and a registered Prompt, you can now display the group! Parameter Description text Text to display under all the prompts PromptGroup:ShowGroup(text)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0)\t\tPromptGroup:ShowGroup(\"My first prompt group\") --Show your prompt group endend)Handle Prompt Completion EventsYou can trigger code when a prompt has a completion event triggered (Example: clicked, held, etc) Parameter Description hideoncomplete Some Options may hide or disapear when completed, Set this to false to not hide. This will default to true if nothing is entered firstprompt:HasCompleted()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0) --Show your prompt group\t\tPromptGroup:ShowGroup(\"My first prompt group\")\t\t \t\t-- Lets listed for the prompt click and enact some code! if firstprompt:HasCompleted() then print(\"First Prompt Completed!\") end endend)Handle Prompt Failure EventsYou can trigger code when a prompt has a failure event triggered (Example: timed, mashed) Parameter Description hideoncomplete Some Options may hide or disapear when completed, Set this to false to not hide. This will default to true if nothing is entered firstprompt:HasFailed()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0) --Show your prompt group\t\tPromptGroup:ShowGroup(\"My first prompt group\")\t\t \t\t-- Lets listed for the prompt click and enact some code! if firstprompt:HasCompleted() then print(\"First Prompt Completed!\") end if firstprompt:HasFailed() then print(\"First Prompt Failed!\") end endend)Delete PromptRemove a prompt completelyfirstprompt:DeletePrompt()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0) --Show your prompt group\t\tPromptGroup:ShowGroup(\"My first prompt group\")\t\t \t\tWait(3000) firstprompt:DeletePrompt() endend)Toggle Prompt VisibilityMake a prompt visible or hidden Parameter Description toggle true or false; true = visible, false = hidden firstprompt:TogglePrompt(toggle)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function()\tlocal PromptGroup = VORPutils.Prompts:SetupPromptGroup() --Setup Prompt Group\t\tlocal firstprompt = PromptGroup:RegisterPrompt(\"Press Me\", 0x4CC0E2FE, 1, 1, true, 'hold', {timedeventhash = \"MEDIUM_TIMED_EVENT\"}) --Register your first prompt while true do Citizen.Wait(0) --Show your prompt group\t\tPromptGroup:ShowGroup(\"My first prompt group\")\t\t \t\tWait(3000) firstprompt:TogglePrompt(false) endend)Pedestrians (Peds)You can leverage Vorps built in function for easy spawn and manipulate in-game pedestrian entities.Create PedThis will spawn a pedestrian in your game world Parameter Description modelhash The hash of the model you want the ped to be x x world position coordinate y y world position coordinate z z world position coordinate heading The heading of the ped (Which way it is facing) location Where to spawn ped. (world, vehicle, mount) safeground Should the ped spawn in a known ok location (default true, disable for more dine accuracy of ped placement) options Extra Options for the Location you select. (See Mode Options below) Modes Options| Location | Key | Options | example||–|–|–|–|| world | None | None | None || vehicle | vehicle | vehicle entity | { vehicle = yourvehicle } || vehicle | seat | VS_ANY_PASSENGER, VS_DRIVER, VS_FRONT_RIGHT, VS_BACK_LEFT, VS_BACK_RIGHT, VS_EXTRA_LEFT_1, VS_EXTRA_RIGHT_1, VS_EXTRA_LEFT_2, VS_EXTRA_RIGHT_2, VS_EXTRA_LEFT_3, VS_EXTRA_RIGHT_3, VS_NUM_SEATS | { seat = “VS_FRONT_RIGHT” } || mount | mount | mount entity | { mount = yourmount } |VORPutils.Peds:Create()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false)end)Freeze PedFreeze a ped where they stand Parameter Description state freeze or unfreeze (true/false), default true ped:Freeze()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:Freeze()end)Invincible PedMake a ped Invincible Parameter Description state Invincible (true/false), default true ped:Invincible()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:Invincible()end)Ped CanBeDamagedMake a ped not take damage Parameter Description state CanBeDamaged (true/false), default true ped:CanBeDamaged()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:CanBeDamaged()end)Set Ped Headingchange the directon a ped is facing Parameter Description head the game world direction to face ped:SetHeading()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:SetHeading(0)end)Set Ped Seeing RangeChange how far the ped can see Parameter Description range 0.0 - 100.0 ped:SeeingRange()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:SeeingRange(70.0)end)Set Ped Hearing RangeChange how far the ped can hear Parameter Description range 0.0 - 100.0 ped:HearingRange()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:HearingRange(80.0)end)Set Ped Can MountChange if a ped can mount something. Parameter Description state true/false ped:CanBeMounted(true)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('u_f_m_tumgeneralstoreowner_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:CanBeMounted(true)end)Set Ped BlipSet a blip on ped that follows Parameter Description bliphash What the blip should show on the map title What the blip should say ped:SetBlip(bliphash, title)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:SetBlip(953018525, 'Person')end)Give Ped WeaponGive a ped a weapon (they will only use it if they are set to be agro) Parameter Description weaponhash What the weapon will be ammocount how much ammo forceinhand Force the weapon to be held forceinholster Force the weapon to be holstered attachpoint Where to attach to the body allowmultiplecopies How many of this gun can the ped have ignoreunlocks Ingore unlockables permanentdegredation permanent degredation ped:GiveWeapon(weaponhash, ammocount, forceinhand, forceinholster, attachpoint, allowmultiplecopies, ignoreunlocks, permanentdegredation)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:AttackTarget(PlayerPedId()) ped:GiveWeapon(0x64356159, 500, true, true, 3, false, true, true)end)Set Ped Flee AttributeEnable or disable pedestrian flee attributes Parameter Description flag What flee attribute to enable/disable enabled is active of not (true/false) ped:FleeAtribute(flag, enabled)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:FleeAtribute('DISABLE_ENTER_VEHICLES', true)end)Set Ped Combat AttributesEnable or disable pedestrian combat attributes Parameter Description attributes This is a list of attributes you want to change Example { {flag = 1, enabled = false}, {flag = 2, enabled = false} } attackrange The distance for aggro abilitylevel how good or not the ped is at fighting movement What kind of movement (0: Stationary (Will just stand in place), 1: Defensive (Will try to find cover and very likely to blind fire), 2: Offensive (Will attempt to charge at enemy but take cover as well), 3: Suicidal Offensive (Will try to flank enemy in a suicidal attack)) ped:SetPedCombatAttributes(attributes, attackrange, abilitylevel, movement)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:SetPedCombatAttributes({ {flag = 0, enabled = false} }, 1, 0, 2)end)Set Ped Combat StyleSet the pedestrians combat style Parameter Description combathash The combat style for the ped duration How long the ped has this combat style ped:SetCombatStyle(combathash, duration)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:SetCombatStyle('SituationAllStop', 240.0)end)Clear Ped Combat StyleClear the pedestrians combat styleped:ClearCombatStyle()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:ClearCombatStyle()end)Attack TargetSet a target for the ped to attack Parameter Description target the ped to attack (can be player) style How long the ped has this combat style (GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF) ped:AttackTarget(target, style)Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:AttackTarget(PlayerPedId(), 'LAW')end)Remove PedRemove a Pedped:Remove()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) ped:Remove()end)Get PedIf there are natives this util does not yet support, you can use this to get the ped to utilize against any native.ped:GetPed()Example Usage:-- client side onlylocal VORPutils = {}TriggerEvent(\"getUtils\", function(utils) VORPutils = utilsend)Citizen.CreateThread(function() local coords = { z = 118.38395690917968, y = 802.531982421875, x = -279.46728515625 } local ped = VORPutils.Peds:Create('s_m_m_valdeputy_01', coords.x, coords.y, coords.z, 0, 'world', false) local rawped = ped:GetPed() -- Use rawped with whatever native required the ped entityend)" }, { "title": "ANIMATIONS", "url": "/VORP_API-docs/posts/animations-lua/", "categories": "Documentation Lua, ANIMATIONS", "tags": "Lua, UI", "date": "2022-08-14 19:24:00 +0100", "snippet": "VORP AnimationsWhat is this script?An animation tool for other scripts to utilize. The goal of this script is to make interacting with animations much easier for other developers. This Script allows other script creators to leverage pre-made animations and animation combos with ease of use in mind.How to install Download this repo Copy and paste vorp_animations folder to resources/vorp_animations Add ensure vorp_animations to your server.cfg file Now you are ready to get coding!Screen ShotDocumentationHow to initialize the animation APIlocal Animations = exports.vorp_animations.initiate()How to play an animationAnimations.playAnimation(animationname, length)Example:Animations.playAnimation('campfire', 2000)How to add a custom prop to an animationsetCustomProp(propobject)This must be used before playing an animation to take effectExample:Animations.setCustomProp({ model = 'w_melee_knife06', coords = { x = -0.01, y = -0.02, z = 0.02, xr = 190.0, yr = 0.0, zr = 0.0 }, bone = 'SKEL_R_Finger13', subprops = { { model = 'p_redefleshymeat01xa', coords = { x = 0.00, y = 0.02, z = -0.20, xr = 0.0, yr = 0.0, zr = 0.0 } } }})How to start an animation with no endAnimations.startAnimation(animationname)Example:Animations.startAnimation('campfire')How to end an animationAnimations.playAnimation(animationname)Example:Animations.endAnimation('campfire')Animation DevToolTo Activate set Config.DevTools to true and then in-game use the /startanimation animationname commandView Current animation Displays the current animation playingProp Live endAnimation Lets you manipulate the main props location easily and lets you copy the coords to the config easilyCommand List A DevTool Command listHow to add an animationNew animations should be added and PR’d to this repo to ensure the best animation for all!Animations can be added via the config.lua of this scriptsWhere to find animation dict and name: https://raw.githubusercontent.com/femga/rdr3_discoveries/master/animations/ingameanims/ingameanims_list.lua-- [\"nameofyouranimation\"] = {-- dict = \"amb_camp@world_camp_fire_cooking@male_d@wip_base\",-- name = \"wip_base\",-- flag = 17, -- This is a flag that limits where the animation plays on the character-- type = 'standard', -- standard or scenario, not super well supported yet-- prop = { -- If you want a prop to be within the animation-- model = 'p_stick04x', -- What model should be shown for th prop-- coords = { -- Where should the prop be placed -- x = 0.2, -- y = 0.04,-- z = 0.12,-- xr = 170.0,-- yr = 50.0,-- zr = 0.0-- },-- bone = 'SKEL_R_Finger13', -- what bone should the prop be connected too-- subprops = { -- Add more props and locations-- {-- model = 's_meatbit_chunck_medium01x',-- coords = {-- x = -0.30, -- y = -0.08,-- z = -0.30,-- xr = 0.0,-- yr = 0.0,-- zr = 70.0-- }-- }-- }-- }-- }," }, { "title": "PROGRESSBAR", "url": "/VORP_API-docs/posts/progressbar/", "categories": "Documentation Lua, PROGRESSBAR", "tags": "Lua, UI", "date": "2022-07-20 19:24:00 +0100", "snippet": "VORP ProgressBar A client side UI progressbar that allows you to display brogress bars/circles within your scripts!How to useCan only be used from client side Initiate the progress bar globally progressbar = exports.vorp_progressbar:initiate()Start your progress UI progressbar.start(message, time, callback, theme)Input Parameters| Input | Info ||–|–|| message | What you want the progress to display || time | how long the progress should display (in milliseconds) || callback | function that will get called when the progress is done || theme | What you want the progress bar/circle to look like |Theme Options| Option | Info ||–|–|| linear | Shows a linear progress flat bar || circle | Shows a circle progress bar || innercircle | Shows a circle progress bar with a seconds countdown in the middle |Example: progressbar.start('Loading Example\", 20000, function () print('DONE!!!!') end, 'linear')" }, { "title": "INTRO", "url": "/VORP_API-docs/posts/intro/", "categories": "1- INTRODUCTION", "tags": "VORP introduction", "date": "2022-05-15 15:55:00 +0100", "snippet": "VORP framework was made by the communitty on their free time to create RedM roleplay servers based on the RDR2 gameit is also the Lead framework in RedM for creating RP servers.GETTING STARTED!!REQUIRMENTS TO RUN A VORP SERVERInstall the following RDR2 or RDO both works for RedM login to steam login to rockstars launcher all the time RDO its cheaper!Download the following XAMPP For connecting to the databse HEIDI SQL to manage the databse mysql is not supported MARAIA DB is what we supportHOSTING YOUR SERVER choose a Windows VPS to host your server. GOOGLE IT if intrested to have your vps service here contact us we support only WINDOWS linux is not supportedINSTALLATION A premade server can be found bellow. downloadCONFIGURATION &amp; PERMISSIONSEdit the server.cfg found at 📁server/server.cfg sv_licenseKey \"\" steam_webApiKey \"\" sv_hostname \"my server\" sv_projectDesc \"my project\" sv_maxclients 48 --with onesync on Permissions &amp; TX Admin open xampp and turn on the first 2 options run with HeidiSQL the SQL file database.sql found in the directory of the premade server create where it says New any name you want then run the file ignore the warnings! start FXServer.exe and it will open a web browser to install TX admin follow the options. and your server should start you must be logged in in RedM with same account your license is to have admin permmisions done your server is installed NOTE: some of the plug-ins from the premade are not updated make sure to check VORP GitHub to update them.DISCLAIMER VORP does not guarantee any support or that any script will workUPDATING RESOURCES todoUse of GitHub todo todo todo" }, { "title": "VORP CORE", "url": "/VORP_API-docs/posts/core-lua/", "categories": "Documentation Lua, CORE", "tags": "Lua", "date": "2022-05-15 04:33:00 +0100", "snippet": "VORP core is the master tool for all your projectsHow to useCore API-- at the top of your server side fileslocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend) The same Event can be called from client side to use for with the functions below for Notifications for CallBacks Hide or show CORE UI -- from server side local _source = source TriggerClientEvent(\"vorp:showUi\", _source, false) --hide -- from client side TriggerEvent(\"vorp:showUi\", true) --showExamples API for notifications client side----------------------------------- at the top of your client sidelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)VORPcore.NotifyTip(\"title\",4000)VORPcore.NotifyLeft(\"title\",\"subtitle\",\"dict\",\"icon\",4000,\"color\")VORPcore.NotifyRightTip(\"title\",4000)VORPcore.NotifyObjective(\"title\",4000)VORPcore.NotifyTop(\"title\",\"location\",4000)VORPcore.NotifySimpleTop(\"title\",\"subtitle\",4000)VORPcore.NotifyAvanced(\"title\",\"dict\",\"icon\",\"color\",4000)VORPcore.NotifyCenter(\"title\",4000)VORPcore.NotifyBottomRight(\"title\",4000)VORPcore.NotifyFail(\"title\",\"subtitle\",4000)VORPcore.NotifyDead(\"title\",\"audioref\",\"\"audioname\"\",4000)VORPcore.NotifyUpdate(\"title\",\"subtitle\",4000)VORPcore.NotifyWarning(\"title\",\"subtitle\",\"audioref\",\"\"audioname\"\",4000) Server side --------------------------------- -- at the top of your client side local VORPcore = {} TriggerEvent(\"getCore\", function(core) VORPcore = core end) local _source = source -- player source VORPcore.NotifyTip(_source,\"title\",4000) VORPcore.NotifyLeft(_source,\"title\",\"subtitle\",\"dict\",\"icon\",4000,\"color\") VORPcore.NotifyRightTip(_source,\"title\",4000) VORPcore.NotifyObjective(_source,\"title\",4000) VORPcore.NotifyTop(_source,\"title\",\"location\",4000) VORPcore.NotifySimpleTop(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyAvanced(_source,\"title\",\"dict\",\"icon\",\"color\",4000) VORPcore.NotifyCenter(_source,\"title\",4000) VORPcore.NotifyBottomRight(_source,\"title\",4000) VORPcore.NotifyFail(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyDead(_source,\"title\",\"audioref\",\"audioname\",4000) VORPcore.NotifyUpdate(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyWarning(_source,\"title\",\"subtitle\",\"audioref\",\"audioname\",4000)Server API Get max characters-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- this returns a numberlocal maxChars = VORPcore.maxCharacters Get Users data-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)local _source = source-- contains functions and information from all characterslocal User = VORPcore.getUser(_source)-- Return user group (not character group)local UserGroup = User.getGroup -- Return character selected by userlocal Character = User.getUsedCharacter -- orlocal Character = VORPcore.getUser(_source).getUsedCharacter--Data you can getCharacter.identifierCharacter.charIdentifierCharacter.groupCharacter.jobCharacter.jobGradeCharacter.moneyCharacter.goldCharacter.rolCharacter.xpCharacter.firstnameCharacter.lastnameCharacter.statusCharacter.coordsCharacter.isdeadCharacter.skinCharacter.comps Set functions-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)local _source = sourcelocal Character = VORPcore.getUser(_source).getUsedCharacter--Functions you can set using the APICharacter.setJob(\"miner\")Character.setJobGrade(1)Character.setGroup(\"admin\")Character.setMoney(1000.50)Character.setGold(1000.20)Character.setRol(1000)Character.setXp(5000)Character.setFirstname(\"Sadie\")Character.setLastname(\"Adler\")Character.updateSkin(\"need comps in json\")Character.updateComps(\"need comps in json\")Character.addCurrency(0, 1000) -- Add money 1000 | 0 = money, 1 = gold, 2 = rolCharacter.removeCurrency(0, 1000) -- Remove money 1000 | 0 = money, 1 = gold, 2 = rolCharacter.addXp(100)Character.removeXp(100)Instance Players uising routing buckets can only be used from client side only-- client side onlylocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- to add a players to different instances use his server id + instance number-- to add players to same instance use only the instanceNumberlocal instanceNumber = 54123 -- any numberVORPcore.instancePlayers(tonumber(GetPlayerServerId(PlayerId()))+ instanceNumber)-- to remove the player from instanceVORPcore.instancePlayers(0) WHITELIST API get data from white list table-- SERVER SIDE ONLYlocal VORPWhitelist = {}TriggerEvent(\"getWhitelistTables\", function(cb) VORPWhitelist = cbend)-- userStaticID this is a static ID used to whitelist/unwhitelist or ban/unban-- needs identifierlocal getid = VORPwl.getEntry(identifier).getId() -- whitelisted returns true or false-- needs identifierlocal getstatus = VORPwl.getEntry(identifier).getStatus() --get players warnings-- use the API core to get source datalocal _source = source local User = VorpCore.getUser(_source)local warnstatus = User.getPlayerwarnings() AUTO DB updater you can use this API to create tables or add columns to DB instead of an sql file or for future updates it will check once if they exist once ran Server side ony-- top at server sidelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- example of how to create tables-- it only does this oncelocal Tables = { { name = \"loadout\", script = \"vorp_inventory\", sql = [[ CREATE TABLE IF NOT EXISTS `loadout` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `identifier` VARCHAR(50) NOT NULL, `charidentifier` INT(11) NULL, `name` VARCHAR(50) NULL DEFAULT NULL, `ammo` VARCHAR(255) NOT NULL DEFAULT '{}', `components` VARCHAR(255) NOT NULL DEFAULT '[]', `dirtlevel` DOUBLE NULL DEFAULT 0, `mudlevel` DOUBLE NULL DEFAULT 0, `conditionlevel` DOUBLE NULL DEFAULT 0, `rustlevel` DOUBLE NULL DEFAULT 0, `used` TINYINT(4) NULL DEFAULT 0, PRIMARY KEY (`id`), INDEX `id` (`id`) ) COLLATE='utf8mb4_general_ci' ENGINE=InnoDB AUTO_INCREMENT=2; ]] }, { name = \"items\", script = \"vorp_inventory\", sql = [[ CREATE TABLE IF NOT EXISTS `items` ( `item` VARCHAR(50) NOT NULL, `label` VARCHAR(50) NOT NULL, `limit` INT(11) NOT NULL DEFAULT 1, `can_remove` TINYINT(1) NOT NULL DEFAULT 1, `type` VARCHAR(50) NULL DEFAULT NULL, `usable` TINYINT(1) NULL DEFAULT NULL, PRIMARY KEY (`item`) USING BTREE ) COLLATE='utf8mb4_general_ci' ENGINE=InnoDB ROW_FORMAT=DYNAMIC; ]] }}-- example on how to create a missing columns in Tableslocal Updates = { { name = \"dropped\", script = \"vorp_inventoryv\", find = [[ select * from Information_Schema.Columns where Table_Name = 'loadout' AND Column_Name = 'dropped'; ]], sql = [[ ALTER TABLE `loadout` ADD COLUMN `dropped` INT(11) NOT NULL DEFAULT 0; ]] }, { name = \"desc\", script = \"vorp_inventoryv\", find = [[ select * from Information_Schema.Columns where Table_Name = 'items' AND Column_Name = 'desc'; ]], sql = [[ ALTER TABLE `items` ADD COLUMN `desc` VARCHAR(5550) NOT NULL DEFAULT 'nice item'; ]] }}-- DB UpdaterCitizen.CreateThread(function() VORPcore.dbUpdateAddTables(Tables) VORPcore.dbUpdateAddUpdates(Updates)end)API for webhooks from client or server side send a webhook to your discordVorpCore.AddWebhook(title, webhook, description, color, name, logo, footerlogo, avatar) Parameter Type Description Required ? title String title of webhhok True webhhok String link of the channel webhook True description String description of the action logged True color number color of the embed false name string name of the webhook false logo string link of the image false footerlogo string link of the image false avatar string link of the image false API charcater played hours this will return the character played hours that is saved in the databaselocal User = VorpCore.getUser(_source) print(User.hours)" }, { "title": "INVENTORY", "url": "/VORP_API-docs/posts/inventory-lua/", "categories": "Documentation Lua, INVENTORY", "tags": "Lua", "date": "2022-05-10 17:34:00 +0100", "snippet": "VORP inventory APIAPIvorp Inventory provide a custom API that allow you to interact with items as wall as creating custom inventories.Installation inventory export to be used at the top of the server side-- at the top of server filelocal VORPInv = {}VORPInv = exports.vorp_inventory:vorp_inventoryApi()Item APIYou can use the API server side to give, delete, register item utility, get quantities and even ask if the player can carry the item.Add Item-- give an itemVorpInv.addItem(source, itemName, qty, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to add True qty Number The quantity of item to add True metadata Table An object containing all custom data of item to add False Sub Item--remove an itemVorpInv.subItem(source, itemName, qty, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to remove True qty Number The quantity of item to remove True metadata Table An object containing all custom data of item to remove False Get Item--get item player have in inventorylocal item = VorpInv.getItem(source, itemName, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get True metadata Table An object containing all custom data of item to get False Return Type Description Return Table (Item) or nil An object containing all item information Get Item Count-- get the count of an item player has in inventorylocal itemCount = VorpInv.getItemCount(source, itemName, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get count True metadata Table An object containing all custom data of item to remove False Return Type Description Return Number The total count of selected item in player inventory Can Carry Item-- checks item limitlocal canCarry = VorpInv.canCarryItem(source, itemName, amount) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to count True amount Number The amount of space needed in Item stack for the item to add True Return Type Description Return Boolean True if there is enough space, False if not. Can Carry Items-- checks inventory limitlocal canCarry = VorpInv.CanCarryItems(source, amount) Parameter Type Description Required ? source Number The player id in game True amount Number The amount of space needed in Inventory for the items to add True Return Type Description Return Boolean True if there is enough space, False if not. Register Usable Itemlocal itemName = \"bread\"VorpInv.RegisterUsableItem(itemName, function(data) print(data.source) -- player using the item print(data.label) -- item labelend) Parameter Type Description Required ? itemName String The name of the item to count True data Function The function that will be called True Return Type Description data.source number returns server ID data.label string returns item Lable from DB Get DB Itemlocal item = VorpInv.getDBItem(source, itemName) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get True Return Type Description statment true/false check if item exists in DB Weapons APIYou can use the API to add, delete and get weapons, ad, remove or get weapon bullets and components and even check if the player can carry the weapons.Add WeaponVorpInv.createWeapon(source, weaponName, ammo, comp) Parameter Type Description Required ? source Number The server player id True weaponName String The hashname of the weapon to add True ammo Table An array containing start ammo False comp Table An array containing start comp False Sub Weapon-- remove weaponVorpInv.subWeapon(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon to remove DB True Give Weapon--give weapon from one player to anotherVorpInv.giveWeapon(source, weaponId, target) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon to remove True target Number The target player id in game True Add BulletsVorpInv.addBullets(source, weaponId, type, qty) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True type String The bullet type to add True qty Number The amount of bullets to add True Sub BulletsVorpInv.subBullets(source, weaponId, type, qty) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True type String The bullet type to remove True qty Number The amount of bullets to remove True Get Weapon Bulletslocal WeaponBullets = VorpInv.getWeaponBullets(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table or nil An Array containing all the loaded bullets in the weapon Get Weapon Componentslocal weaponComps = VorpInv.getWeaponComponents(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table or nil An Array containing all the loaded components on the weapon Get Weaponslocal weapons = VorpInv.getUserWeapons(source) Parameter Type Description Required ? source Number The player id in game True Return Type Description Return Table or nil An Array containing all the weapon of the player Get Weaponlocal weapon = VorpInv.getUserWeapon(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table (Weapon) or nil An Object containing all weapon information Can Carry WeaponsVorpInv.canCarryWeapons(source, amount, function(cb) --can carry weapons local canCarry = cb if canCarry then --give weapon else --cant carry endend) Parameter Type Description Required ? source Number The player id in game True amount Number The amount of space needed to carry the weapons True cb Function(canCarry) A Callback function containing a Boolean Parameter True Inventory APIYou can use the API to open or close the player Inventory, and register custom private or shared inventories.Get Inventorylocal inventory = VorpInv.getUserInventory(source)print(inventory) Parameter Type Description Required ? source Number The player id in game True Return Type Description Return Table (Item[]) or nil An Array containing all items in player Inventory Open Player Inventory-- opens source inventory to source or the invid (secondary inv) to sourceVorpInv.OpenInv(source,invID) -- to open custom inventory or play inventory Parameter Type Description Required ? source Number The player id in game True invID Number The secondary inventory ID false Close Player Inventory-- close source inv or close (secondary inv) with its IDVorpInv.CloseInv(source,invID) Parameter Type Description Required ? source Number The player id in game True invID Number The secondary inventory ID false Register InventoryVorpInv.registerInventory(id, name, limit, acceptWeapons, shared) Parameter Type Description Required ? id String The id of the custom inventory True name String The name of the custom inventory True limit Number The item limit of the custom inventory True acceptWeapons Boolean Does inventory accept weapons (Default: True) False shared Boolean Is Inventory shared across all players (Default: False) False Remove InventoryVorpInv.removeInventory(id) Parameter Type Description Required ? id String The id of the custom inventory to remove True Set Custom Inventory Item LimitVorpInv.setInventoryItemLimit(id, itemName, limit) Parameter Type Description Required ? id String The id of the custom inventory True itemName String The name of the Item True limit Number The limit for this item in the custom inventory. Set 0 to deny this item in this inventory True Set Custom Inventory Weapon LimitVorpInv.setInventoryWeaponLimit(id, weaponName, limit) Parameter Type Description Required ? id String The id of the custom inventory True weaponName String The name of the Weapon True limit Number The limit for this weapon in the custom inventory. Set 0 to deny this weapon in this inventory True " }, { "title": "METABOLISM", "url": "/VORP_API-docs/posts/metabolism-lua/", "categories": "Documentation Lua, METABOLISM", "tags": "Lua", "date": "2022-05-10 17:34:00 +0100", "snippet": "VORP METABOLISM Lua*" }, { "title": "VORP INPUTS", "url": "/VORP_API-docs/posts/inputs-lua/", "categories": "Documentation Lua, INPUTS", "tags": "Lua", "date": "2022-05-08 07:10:00 +0100", "snippet": "VORP inputs is a tool that is mandatory within the vorp framework.VORP INPUTS LUA downloadHow to useCan only be used from client side Single inputlocal button = \"Confirm\" --labellocal placeholder = \"Insert player ID\" --label TriggerEvent(\"vorpinputs:getInput\", button, placeholder, function(result) if result ~= \"\" or result then -- making sure its not empty or nil print(result) -- returs a string else print(\"its empty?\") -- notify end end)With input Type local button = \"Confirm\" local placeholder = \"Test Here\" local inputType = \"input\" -- number ,textarea , date, etc. TriggerEvent(\"vorpinputs:getInput\", button, placeholder,inputType, function(result) if result ~= \"\" or result then -- making sure its not empty or nil print(result) -- returs a string else print(\"its empty?\") -- notify end end)Advanced inputs NEWlocal myInput = { type = \"enableinput\", -- don't touch inputType = \"input\", -- input type button = \"Confirm\", -- button name placeholder = \"NAME QUANTITY\", -- placeholder name style = \"block\", -- don't touch attributes = { inputHeader = \"GIVE ITEM\", -- header type = \"text\", -- inputype text, number,date,textarea ETC pattern = \"[0-9]\", -- only numbers \"[0-9]\" | for letters only \"[A-Za-z]+\" title = \"numbers only\", -- if input doesnt match show this message style = \"border-radius: 10px; background-color: ; border:none;\"-- style }}TriggerEvent(\"vorpinputs:advancedInput\", json.encode(myInput), function(result) if result ~= \"\" and result then -- make sure its not empty or nil print(result) --returns string else print(\"it's empty?\") --notify endend)Devtipssplit a string into more than one separated by a spacelocal result = yourvariablelocal splitString = {} for i in string.gmatch(result, \"%S+\") do splitString[#splitString + 1] = i endlocal data1, data2 = splitString[1],splitString[2]print(data1,data2) -- use can use these to make sure what you want the input to be. tostring(data1) -- returns string tonumber(data2) -- returns number" }, { "title": "CHARACATERS", "url": "/VORP_API-docs/posts/characters-lua/", "categories": "Documentation Lua, CHARACTERS", "tags": "Lua", "date": "2022-05-08 04:33:00 +0100", "snippet": "VORP CHARACTERS This code gives you, the players, clothes and skin from the server side.-- server sideTriggerEvent(\"vorpcharacter:getPlayerComps\", _source, function(data) local json_skin = data.skins\tlocal json_cloths = data.clothsend) This gives you the players clothes and skin from the client side.It comes from the client cache.-- client sideTriggerEvent(\"vorpcharacter:getPlayerComps\", _source, function(skin, cloths) local beard = skin.Beard -- Beard is in the database \tlocal hat = cloths.Hat -- Hat is in the databaseend) This sets one component of the player skin and saves it in the database.This comes from the server side.-- server sidelocal _source = sourcelocal CompHash = \"component hash\"TriggerEvent(\"vorpcharacter:setPlayerSkinChange\", _source, \"Beard\", CompHash) This sets one component of the player clothes and saves it in the database.This comes from the server side.-- server sidelocal _source = sourcelocal CompHash = \"component hash\"TriggerEvent(\"vorpcharacter:setPlayerSkinChange\", _source, \"Hat\", CompHash) This refreshes the player skin that is saved in the client cache.--client sideTriggerEvent(\"vorpcharacter:refreshPlayerSkin\") This refreshes the player skin from the database.This comes from the client side.-- client sideTriggerServerEvent(\"vorpcharacter:getPlayerSkin\") You can get a list of components with all the clothes from vorp_character using this callback event.TriggerEvent(\"vorpcharacter:getSkinComps\", \"hats_male\", function(components) for index,value in pairs(components) do print(tostring(v)) endend) It returns a list with the componentsParameters: hats_male returns the male hats list hats_female returns the female hats list eyewear_male returns the male eyewear list eyewear_female returns the female eyewear list neckwear_male returns the male neckwear list neckwear_female returns the female neckwear list neckties_male returns the male neckties list neckties_female returns the female neckties list shirts_male returns the male shirts list shirts_female returns the female shirts list suspenders_male returns the male suspenders list suspenders_female returns the female suspenders list vests_male returns the male vests list vests_female returns the female vests list coats_male returns the male coats list coats_female returns the female coats list ponchos_male returns the male ponchos list ponchos_female returns the female ponchos list cloaks_male returns the male cloaks list cloaks_female returns the female cloaks list gloves_male returns the male gloves list gloves_female returns the female gloves list rings_rh_male returns the right hand male rings list rings_rh_female returns the right hand female rings list rings_lh_male returns the left hand male rings list rings_lh_female returns the left hand female rings list bracelets_male returns the male bracetels list bracelets_female returns the female bracelets list gunbelts_male returns the male gunbelts list gunbelts_female returns the female gunblets list belts_male returns the male belts list belts_female returns the female belts list buckles_male returns the male buckles list buckles_female returns the female buckles list holsters_s_male returns the secondary male holsters list holsters_s_female returns the secondary female holsters list pants_male returns the male pants list pants_female returns the female pants list skirts_female returns the skirts list boots_male returns the male boots list boots_female returns the female boots list chaps_male returns the male chaps list chaps_female returns the female chaps list spurs_male returns the male spurs list spurs_female returns the female spurs list hair_male returns the male hair list hair_female returns the female hair list beard_male returns the beards list teeth_male returns the male teeth list teeth_female returns the female teeth list" }, { "title": "REDM", "url": "/VORP_API-docs/posts/redm/", "categories": "", "tags": "game references", "date": "2022-05-04 00:32:00 +0100", "snippet": "REDM Game References" } ]
